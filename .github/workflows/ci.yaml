name: Continuous Integration

on:
  push:
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload artifacts"
        type: boolean
        required: true
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  lint_docker:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Hadolint
        run: |
          curl -sSL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 -o hadolint
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/hadolint

      - name: Lint Dockerfile
        run: hadolint Dockerfile

  build_and_test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            shell: bash
          - os: macos-latest
            rust: stable
            shell: bash
          - os: windows-latest
            # We need to target GNU MinGW on Windows for the `gmp-mpfr-sys` dependency of Pallasâ€™ `phase2`
            rust: stable-x86_64-pc-windows-gnu
            shell: "msys2 {0}"
      fail-fast: true
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, rust-src, clippy

      - name: Install MSYS2 (Windows-only)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            m4 make patch diffutils tar gzip mingw-w64-x86_64-clang mingw-w64-x86_64-llvm
          path-type: inherit

      - name: Set env for rest of job (Windows-only)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          {
            echo "CC=clang"
            echo "AR=llvm-ar"
            echo "RANLIB=llvm-ranlib"
            echo "ABI=64"
          } >> "$GITHUB_ENV"

      - name: Build
        run: cargo +${{ matrix.rust }} build --release --verbose

      - name: Test
        run: cargo +${{ matrix.rust }} test --lib --verbose
        timeout-minutes: 10

      - name: Check formatting
        run: cargo +${{ matrix.rust }} fmt --all -- --check

      - name: Lint with Clippy
        run: cargo +${{ matrix.rust }} clippy --all-targets --features tarpaulin -- -D warnings

      - name: Package binaries
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.upload_artifacts == 'true'
        run: |
          mkdir -p artifacts
          cp target/release/blockfrost-platform* artifacts/

      - name: Upload artifacts
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.upload_artifacts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-binary
          path: artifacts/

  integration_tests:
    name: Integration Tests
    runs-on: [self-hosted, Linux, X64, nixos]
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Integration Tests
        run: nix develop .# --command cargo test --verbose --test endpoints_test

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --lib --features tarpaulin --out html --output-dir coverage --fail-under 12

      - name: Upload coverage report for GitHub Pages
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage/

  pages:
    name: Prepare coverage for GitHub Pages
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v3

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: coverage

      - name: Copy to index.html
        run: cp coverage/tarpaulin-report.html coverage/index.html

      - name: Upload coverage folder
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage/

  deploy:
    name: Deploy to GitHub Pages
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: pages
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy
        uses: actions/deploy-pages@v4
